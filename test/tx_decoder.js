/* global describe it */
/* eslint no-new: 0 */

var assert = require('assert')

var bitcore = require('bitcore')
var tx_decoder = require('../src/tx_decoder')
var fixtures = require('./fixtures/xcp_tx')

var Transaction = bitcore.Transaction
var TxDecoder = tx_decoder.TxDecoder

describe('TxDecode', function () {
  it('Tokenly\'s getSampleCounterpartyTransactionProtocol2', function () {
    var tx = new Transaction(fixtures.getSampleCounterpartyTransactionProtocol2)
    var record = new TxDecoder(tx)

    assert.deepEqual(record.data,
      new Buffer([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
        0xFA, 0xDF, 0x00, 0x00, 0x00, 0x17, 0x48, 0x76, 0xE8, 0x00]))
    assert.strictEqual(record.receiverAddr.toString(),
      '12pv1K6LTLPFYXcCwsaU7VWYRSX7BuiF28')
    assert.strictEqual(record.senderAddr.toString(),
      '1AuTJDwH6xNqxRLEjPB7m86dgmerYVQ5G1')
  })

  it('Tokenly\'s getSampleCounterpartyTransactionProtocol3', function () {
    var tx = new Transaction(fixtures.getSampleCounterpartyTransactionProtocol3)
    var record = new TxDecoder(tx)

    assert.deepEqual(record.data,
      new Buffer([ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
        0xFA, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x0B, 0xEB, 0xC2, 0x00 ]))
    assert.strictEqual(record.receiverAddr.toString(),
      '1FEbYaghvr7V53B9csjQTefUtBBQTaDFvN')
    assert.strictEqual(record.senderAddr.toString(),
      '1291Z6hofAAvH8E886cN9M5uKB1VvwBnup')
  })

  it('Tokenly\'s getSampleCounterpartyTransactionProtocol4', function () {
    var tx = new Transaction(fixtures.getSampleCounterpartyTransactionProtocol4)
    var record = new TxDecoder(tx)

    assert.deepEqual(record.data,
      new Buffer([ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
        0xFA, 0xDF, 0x00, 0x00, 0x00, 0x00, 0x05, 0xF5, 0xE1, 0x00 ]))

    assert.strictEqual(record.receiverAddr.toString(),
      '1Q7VHJDEzVj7YZBVseQWgYvVj3DWDCLwDE')
    assert.strictEqual(record.senderAddr.toString(),
      '1MFHQCPGtcSfNPXAS6NryWja3TbUN9239Y')
  })

  it('Tokenly\'s getSampleCounterpartyTransactionProtocol5', function () {
    var tx = new Transaction(fixtures.getSampleCounterpartyTransactionProtocol5)
    var record = new TxDecoder(tx)

    assert.deepEqual(record.data,
      new Buffer([ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
        0xFA, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x2A, 0x05, 0xF2, 0x00]))

    assert.strictEqual(record.receiverAddr.toString(),
      '1KUsjZKrkd7LYRV7pbnNJtofsq1HAiz6MF')
    assert.strictEqual(record.senderAddr.toString(),
      '12iVwKP7jCPnuYy7jbAbyXnZ3FxvgLwvGK')
  })

  it('decodes a random counterparty transaction', function () {
    // This was from a random Counterparty Broadcast. Txid:
    //   eae1fd843f267d756c765b3e84ff33cd3f7dcde4df671c53b2e3465ba9f1b94e

    var tx = new Transaction(fixtures.randomCounterpartyTransaction)
    var record = new TxDecoder(tx)

    assert.deepEqual(record.data,
      new Buffer([ 0x0, 0x0, 0x0, 0x1e, 0x55, 0x54, 0xa9, 0xa2, 0xbf, 0xf0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x42, 0x4c,
        0x4f, 0x43, 0x4b, 0x53, 0x43, 0x41, 0x4e, 0x20, 0x56, 0x45, 0x52,
        0x49, 0x46, 0x59, 0x2d, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
        0x20, 0x34, 0x6d, 0x6d, 0x71, 0x61, 0x36, 0x69, 0x63, 0x63, 0x62,
        0x72, 0x72, 0x67, 0x6b, 0x79 ]))

    assert.strictEqual(record.senderAddr.toString(),
      '1HARUMuoSXftAwY6jxMUutc9uKSCK9zxzF')
    assert.strictEqual(record.receiverAddr, undefined)
  })

  it('decodes a pubkeyhash encoding', function () {
    // This was from Txid:
    //   '76133a842ced8d76047e070924bca66652b19581803079f200d35fd824499940'

    var tx = new Transaction(fixtures.pubkeyHashEncoding)
    var record = new TxDecoder(tx)

    assert.deepEqual(record.data,
      new Buffer([ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1e, 0x7a, 0x9d,
        0x4c, 0x0, 0x0, 0x0, 0x0, 0x5, 0xf5, 0xe1, 0x0 ]))

    assert.strictEqual(record.senderAddr.toString(),
      '1Ko36AjTKYh6EzToLU737Bs2pxCsGReApK')
    assert.strictEqual(record.receiverAddr.toString(),
      '1BdHqBSfUqv77XtBSeofH6XwHHczZxKRUF')
  })

  it('decodes these weird two output OP_RETURNs', function () {
    /*
      The reason this is a weird transaction is
      because the size of the inputs happens to equal dust_size + tx fee

      This was from Txid:
        '05f89f3538e762c534fa9c65200c115b9796386ce2eb8f88f3d7b430873ec302'
    */

    var tx = new Transaction(fixtures.twoOutputOpreturns)
    var record = new TxDecoder(tx)

    assert.deepEqual(record.data,
      new Buffer([ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
        0x0, 0x0, 0x0, 0x0, 0x5, 0xf5, 0xe1, 0x0 ]))

    assert.strictEqual(record.senderAddr, undefined)
    assert.strictEqual(record.receiverAddr.toString(),
      '1DnDQ1ef1eCuFcexZn1wqXFdtbFTQqE9LH')
  })

  it('decodes the mother of all multisig broadcasts', function () {
    // This was from Txid:
    //   '14200afba2c8f91664afc37143763e5987a20647db3443c999137cc41b4db6e4'
    var tx = new Transaction(fixtures.motherOfMultisig)
    var record = new TxDecoder(tx)

    assert.deepEqual(record.data,
      new Buffer([ 0x0, 0x0, 0x0, 0x1e, 0x55, 0x6a, 0x18, 0xe0, 0xbf, 0xf0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x43, 0x6f, 0x6d,
        0x6d, 0x65, 0x72, 0x63, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
        0x20, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x20, 0x68, 0x61,
        0x73, 0x20, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65,
        0x6c, 0x79, 0x20, 0x61, 0x6c, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x65, 0x78,
        0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x6f, 0x6e,
        0x20, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x69,
        0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
        0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x20, 0x74,
        0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64,
        0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
        0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x65, 0x6c, 0x65, 0x63,
        0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65,
        0x6e, 0x74, 0x73, 0x2e, 0x20, 0x57, 0x68, 0x69, 0x6c, 0x65, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x77, 0x6f,
        0x72, 0x6b, 0x73, 0x20, 0x77, 0x65, 0x6c, 0x6c, 0x20, 0x65, 0x6e, 0x6f,
        0x75, 0x67, 0x68, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x73, 0x74,
        0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
        0x73, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x20,
        0x73, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d,
        0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x65, 0x6e,
        0x74, 0x20, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73,
        0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x75, 0x73,
        0x74, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6d, 0x6f, 0x64, 0x65,
        0x6c, 0x2e, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6c,
        0x79, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
        0x69, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
        0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x70, 0x6f, 0x73,
        0x73, 0x69, 0x62, 0x6c, 0x65, 0x2c, 0x20, 0x73, 0x69, 0x6e, 0x63, 0x65,
        0x20, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x69,
        0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x76, 0x6f, 0x69, 0x64,
        0x20, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64,
        0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65,
        0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x65, 0x64,
        0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65,
        0x61, 0x73, 0x65, 0x73, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
        0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x2c, 0x20,
        0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
        0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x70, 0x72, 0x61,
        0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
        0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20,
        0x61, 0x6e, 0x64, 0x20, 0x63, 0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20,
        0x6f, 0x66, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x73,
        0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20,
        0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x61, 0x73, 0x75, 0x61, 0x6c,
        0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
        0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65,
        0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x65,
        0x72, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
        0x65, 0x20, 0x6c, 0x6f, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x62,
        0x69, 0x6c, 0x69, 0x74, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b,
        0x65, 0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
        0x69, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
        0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x6e, 0x72, 0x65, 0x76,
        0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
        0x69, 0x63, 0x65, 0x73, 0x2e, 0x20, 0x57, 0x69, 0x74, 0x68, 0x20, 0x74,
        0x68, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
        0x74, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
        0x61, 0x6c, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x65, 0x65, 0x64,
        0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x72, 0x75, 0x73, 0x74, 0x20, 0x73,
        0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x2e, 0x20, 0x4d, 0x65, 0x72, 0x63,
        0x68, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
        0x65, 0x20, 0x77, 0x61, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
        0x65, 0x69, 0x72, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
        0x73, 0x2c, 0x20, 0x68, 0x61, 0x73, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x20,
        0x74, 0x68, 0x65, 0x6d, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6f, 0x72,
        0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
        0x6e, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20,
        0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77,
        0x69, 0x73, 0x65, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x2e, 0x20, 0x41, 0x20,
        0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x63,
        0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x72,
        0x61, 0x75, 0x64, 0x20, 0x69, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70,
        0x74, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x75, 0x6e, 0x61, 0x76, 0x6f,
        0x69, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x73,
        0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
        0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x6e, 0x63, 0x65,
        0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x69, 0x65, 0x73, 0x20, 0x63, 0x61,
        0x6e, 0x20, 0x62, 0x65, 0x20, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x65, 0x64,
        0x20, 0x69, 0x6e, 0x20, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x20, 0x62,
        0x79, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x68, 0x79, 0x73,
        0x69, 0x63, 0x61, 0x6c, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
        0x79, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6e, 0x6f, 0x20, 0x6d, 0x65,
        0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x20, 0x65, 0x78, 0x69, 0x73,
        0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x70,
        0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72,
        0x20, 0x61, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
        0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
        0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x61, 0x20,
        0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74,
        0x79, 0x2e, 0x20, 0x57, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e,
        0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20,
        0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x69, 0x63, 0x20, 0x70,
        0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65,
        0x6d, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x63,
        0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
        0x20, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x65,
        0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2c,
        0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e,
        0x79, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
        0x67, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f,
        0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x20, 0x64, 0x69,
        0x72, 0x65, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
        0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x77,
        0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
        0x65, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x74, 0x72,
        0x75, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x20,
        0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73,
        0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74,
        0x20, 0x61, 0x72, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61,
        0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x6d, 0x70,
        0x72, 0x61, 0x63, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20,
        0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x20, 0x77, 0x6f, 0x75, 0x6c,
        0x64, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x20, 0x73, 0x65,
        0x6c, 0x6c, 0x65, 0x72, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x66,
        0x72, 0x61, 0x75, 0x64, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x6f,
        0x75, 0x74, 0x69, 0x6e, 0x65, 0x20, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77,
        0x20, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x73, 0x20,
        0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x65, 0x61, 0x73, 0x69, 0x6c, 0x79,
        0x20, 0x62, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
        0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65,
        0x63, 0x74, 0x20, 0x62, 0x75, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x20, 0x49,
        0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x70, 0x61, 0x70, 0x65, 0x72,
        0x2c, 0x20, 0x77, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
        0x20, 0x61, 0x20, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20,
        0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x75, 0x62, 0x6c,
        0x65, 0x2d, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x70,
        0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67,
        0x20, 0x61, 0x20, 0x70, 0x65, 0x65, 0x72, 0x2d, 0x74, 0x6f, 0x2d, 0x70,
        0x65, 0x65, 0x72, 0x20, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
        0x74, 0x65, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
        0x70, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
        0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6d,
        0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x70,
        0x72, 0x6f, 0x6f, 0x66, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
        0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61,
        0x6c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74,
        0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
        0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,
        0x69, 0x73, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0x61, 0x73,
        0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x20, 0x68, 0x6f, 0x6e,
        0x65, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x63, 0x6f,
        0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x63,
        0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20,
        0x43, 0x50, 0x55, 0x20, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x74, 0x68,
        0x61, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x63, 0x6f, 0x6f, 0x70, 0x65,
        0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70,
        0x20, 0x6f, 0x66, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72,
        0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e]))

    assert.strictEqual(record.senderAddr.toString(),
      '186sRhi5Ux1eKGzx5vRdq1ueGGB5NKLKRr')
    assert.strictEqual(record.receiverAddr, undefined)
  })

  it('doesn\'t support multisig transactions ATM', function () {
    // Txid:
    // d4153cb6c3756d5198af15a018f50731dcdacae86d5448c7404b7e42adf59942

    var tx = new Transaction(fixtures.cpMultisig)
    assert.throws(function () { new TxDecoder(tx) }, tx_decoder.BadEncodingError)
  })

  it('Doesn\'t parse this weird double output send to self', function () {
    // Txid: http://www.blockscan.com/txInfo/11675374
    // b062d52f7749cf46cbe01e8dd16fe2b7edd6483269c8a0ac5b0b3f8ea6370e5f

    var tx = new Transaction(fixtures.cpInvalidSelfie)
    assert.throws(function () { new TxDecoder(tx) }, tx_decoder.BadEncodingError)
  })

  it('Data before addresses', function () {
    // Txid: http://www.blockscan.com/txInfo/11675370
    // 54d181aba863bec612355a724095d75fa49fde9c8e161b6240950de1a6b46958

    var tx = new Transaction(fixtures.dataBeforeAddresses)
    assert.throws(function () { new TxDecoder(tx) }, tx_decoder.BadEncodingError)
  })

  it('Doesn\'t parse this weird double-output spend', function () {
    // Txid: http://www.blockscan.com/txInfo/11674475
    // 99beec983f9b700629cb3283b5444e837b73790d2e0eec60f00fdb443340d446

    var tx = new Transaction(fixtures.doubleOutputSpend)
    assert.throws(function () { new TxDecoder(tx) }, tx_decoder.BadEncodingError)
  })
})
